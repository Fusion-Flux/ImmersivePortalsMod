plugins {
    id 'java-library'
    id 'fabric-loom' version '0.11-SNAPSHOT' apply(false)
    id 'maven-publish'



//    id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1'
    id 'io.github.juuxel.loom-quiltflower' version '1.6.0'  // https://github.com/Juuxel/LoomQuiltflower
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/imm_ptl_peripheral.accesswidener")
}

repositories {
    flatDir {
        dirs 'deps'
    }
}

allprojects {

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    version = rootProject.mod_version

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io'
        }
        maven { url "https://maven.shedaniel.me/" }

        // for sodium
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }

        // for databreaker
        maven {
            name = "Gegy's Maven"
            url = "https://maven.gegy.dev/"
        }

        // for parchment
        maven{
            url = "https://maven.parchmentmc.org"
        }


    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        it.options.release = 17
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings() {
                setNameSyntheticMembers(false)
            }
            parchment("org.parchmentmc.data:parchment-1.18.1:2022.03.06@zip")
        }
        
//        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        //For Nullable
        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

        modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        }
        modCompileOnly "maven.modrinth:modmenu:${modmenu_version}"

        modCompileOnly('maven.modrinth:pehkui:3.2.0+1.14.4-1.19')

        modCompileOnly "maven.modrinth:sodium:mc1.18.2-0.4.1"
//        implementation "org.joml:joml:1.10.2" // for sodium

        modCompileOnly 'maven.modrinth:iris:1.18.x-v1.2.1'
//        implementation "org.anarres:jcpp:1.4.14" // for iris
//        implementation 'org.slf4j:slf4j-api:1.7.12' // for iris

        modCompileOnly("maven.modrinth:gravitychanger:0.3.0") {
            transitive = false
        }

//        modImplementation ("com.jozufozu.flywheel:Flywheel-Fabric:1.18-0.6.0.custom"){
//            exclude(group: "net.fabricmc.fabric-api")
//        }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

}



jar {
    from "LICENSE"
}

subprojects {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

dependencies {

    // for testing with dimthread
//    implementation "com.github.wearblackallday:JavaUtils:bd58640372"

//    modRuntimeOnly ("supercoder79:databreaker:0.2.8") {
//        exclude module: "fabric-loader"
//    }

    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"
    include "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"

//    fileTree(dir: 'deps', include: '*.jar').each {
//        String baseName = it.name.replace(".jar", "")
//        String version = "0.1.0"
//        int split = baseName.lastIndexOf('-')
//
//        if (split != -1) {
//            version = baseName.substring(split + 1)
//            baseName = baseName.substring(0, split)
//        }
//
//        String name = "testmod:${baseName}:${version}"
//
//        System.out.println("Found test mod: " + it.name.replace(".jar", "") + " -> " + name)
//
//        modImplementation name
////        modCompileOnly name
////        modRuntime name
//    }
}

dependencies {
    subprojects.each {
        implementation project(path: ":${it.name}", configuration: "namedElements")
        include project("${it.name}:")
    }
}

// miscellaneous

task printClasspath {
    doLast {
        // NOTE don't forget to exclude the submod dev jar
        configurations.compileClasspath.each { println "\"" + (it.toString().replace("\\", "/")) + "\"," }
    }
}

task additionalCopy(type: Copy) {
    dependsOn(remapJar)
    from file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
    into file("${project.buildDir}/to_upload")
    rename { n -> "$archivesBaseName-${version}-mc${project.minecraft_version}-fabric.jar" }
}


// modrinth
